# 公共参数
case_common:
  allureEpic: Gymery
  allureFeature: 动作服务
  allureStory: 删除动作接口
  mark: Action


delete_action_01:
    host: ${{host()}}
    url: /s/v1/fitness/action/delete
    method: DELETE
    detail: 删除不存在的动作，期望删除失败
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    # data传参 时，定义了 ignore 代表忽略字段（ data = "str"）
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      ignore: 54243543521232

    dependence_case: false
    # 依赖的数据
    dependence_case_data:
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
      message:
        jsonpath: $.message
        type: ==
        value: 数据为空
        AssertType:
    sql:


delete_action_02:
    host: ${{host()}}
    url: /s/v1/fitness/action/delete
    method: DELETE
    detail: 新增成功后，依赖该用例删除数据--默认跳过不执行
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    # data传参 时，定义了 ignore 代表忽略字段（ data = "str"）
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      ignore:

    dependence_case: true
    # 依赖的数据
    dependence_case_data: &case_id
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.id
            replace_key: $.data.ignore
    assert: &assert
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 111
        AssertType:

    sql:
      - select status from t_action WHERE name="$cache{insert_action_01_name}"
    setup_sql:
      - SELECT id from t_action WHERE name="$cache{insert_action_01_name}"


delete_action_04:
    host: ${{host()}}
    url: /s/v1/fitness/action/delete
    method: DELETE
    detail: 新增成功后，依赖该用例删除数据--默认跳过不执行
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    # data传参 时，定义了 ignore 代表忽略字段（ data = "str"）
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      ignore:

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      *case_id
    assert:
      *assert
    sql:
      - select status from t_action WHERE name="$cache{insert_action_error_name}"
    setup_sql:
      - SELECT id from t_action WHERE name="$cache{insert_action_error_name}"


delete_action_03:
    host: ${{host()}}
    url: /s/v1/fitness/action/delete
    method: DELETE
    detail: 正常删除存在的动作
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    # data传参 时，定义了 ignore 代表忽略字段（ data = "str"）
    requestType: data
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      ignore:

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      # 先发送新增动作的请求
      - case_id: insert_action_delete
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      # 再从数据库查询刚刚新增的动作id, 查询时依赖 新增动作的  case_id： insert_action_delete
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.id
            replace_key: $.data.ignore
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:

      not_jsonpath:
        jsonpath: -1
        type: ==
        value: $.sql_data[*].status
        AssertType: SQL
    sql:
      - select status from t_action WHERE name="$cache{insert_action_delete_name}"
    setup_sql:
      - SELECT id from t_action WHERE name="$cache{insert_action_delete_name}"