# 公共参数
case_common:
  allureEpic: Gymery
  allureFeature: 课程服务
  allureStory: 写入课程接口
  mark: Course

insert_course_01:
    host: ${{host()}}
    url: /s/v1/fitness/course/insert
    method: POST
    detail: 正常写入课程
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
      Content-Length:
      # 这里token的值，写的是存入缓存的名称， 如果要登录的话
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data: &data
      {
        "name": "${{get_name_time()}}",  # 动态参数, 确保sql查询时  name是唯一值
        "intro": "",
        "useMachine": true,
        "description": "<p>坐在地板上,双腿伸直双手抓住两只脚的脚尖,若柔韧性好,双手可伸直越过双脚至极限位置保持10~30秒.注意坚持后背直立</p>",
        "avatarId": "",
        "calorie": 0,
        "totalDuration": ,
        "gradeId": "",
        "videoId": "",
        "modelId": ,
        "courseGroupAddRequests": [{
              "name": "",
              "type": "",
              "seq": "${{random_int(1, 10)}}",
              "courseGroupItemAddRequests": [
                {
                  "actionId": "",
                  "duration": "${{random_int(10, 30)}}",
                  "times": "${{random_int(5, 10)}}",
                  "batch": "${{random_int(2, 5)}}",
                  "span": "${{random_int(5, 10)}}",
                  "leftForce": "${{random_int(5, 10)}}",
                  "rightForce": "${{random_int(5, 10)}}",
                  "rightForceMode": "${{random_int(1, 2)}}",
                  "leftForceMode": "${{random_int(1, 2)}}",
                  "seq": "${{random_int(1, 10)}}"
                }
              ]
        }]
      }
    dependence_case: true
    # 依赖同一个接口多个数据
    dependence_case_data: &case_data
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.intro
            replace_key: $.data.intro

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.avatar_id
            replace_key: $.data.avatarId

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.total_duration
            replace_key: $.data.totalDuration

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.grade_id
            replace_key: $.data.gradeId

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.video_id
            replace_key: $.data.videoId

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.model_id
            replace_key: $.data.modelId

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.type_id
            replace_key: $.data.courseGroupAddRequests[0].type

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.type_name
            replace_key: $.data.courseGroupAddRequests[0].name

      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.actionID
            replace_key: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].actionId

    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言为 0"

      # not_jsonpath  不需要通过jsonpath 提取数据， 实际结果写死
      message:
        jsonpath: $.message
        type: ==
        value: null
        AssertType:
        message: "message 断言"

      not_jsonpath:
        jsonpath: $cache{insert_course_01_name}
        type: ==
        value: $.sql_data[*].name
        AssertType: SQL
        message: "course_name 断言"

      not_jsonpath1:
        jsonpath: $cache{insert_course_01_intro}
        type: ==
        value: $.sql_data[*].intro
        AssertType: SQL
        message: "course_intro 断言"

      not_jsonpath2:
        jsonpath: $cache{insert_course_01_avatarId}
        type: ==
        value: $.sql_data[*].avatar_id
        AssertType: SQL
        message: "avatar_id 断言"

      not_jsonpath3:
        jsonpath: $cache{insert_course_01_totalDuration}
        type: ==
        value: $.sql_data[*].total_duration
        AssertType: SQL
        message: "totalDuration 断言"

#      not_jsonpath4:
#        jsonpath: $cache{insert_course_01_gradeId}
#        type: ==
#        value: $.sql_data[*].grade_id
#        AssertType: SQL
#        message: "gradeId 断言"

      not_jsonpath5:
        jsonpath: $cache{insert_course_01_videoId}
        type: ==
        value: $.sql_data[*].video_id
        AssertType: SQL
        message: "video_id 断言"

      not_jsonpath6:
        jsonpath: $cache{insert_course_01_modelId}
        type: ==
        value: $.sql_data[*].model_id
        AssertType: SQL
        message: "model_id 断言"

      not_jsonpath7:
        jsonpath: $cache{insert_course_01_group_type}
        type: ==
        value: $.sql_data[*].type
        AssertType: SQL
        message: "group_type 断言"

      not_jsonpath8:
        jsonpath: $cache{insert_course_01_group_name}
        type: ==
        value: $.sql_data[*].c_groupName
        AssertType: SQL
        message: "groupName 断言"

      not_jsonpath9:
        jsonpath: $cache{insert_course_01_group_seq}
        type: ==
        value: $.sql_data[*].c_groupReq
        AssertType: SQL
        message: "c_groupReq 断言"

      not_jsonpath10:
        jsonpath: $cache{insert_course_01_actionId}
        type: ==
        value: $.sql_data[*].action_id
        AssertType: SQL
        message: "action_id 断言"

      not_jsonpath11:
        jsonpath: $cache{insert_course_01_action_times}
        type: ==
        value: $.sql_data[*].times
        AssertType: SQL
        message: "action_times 断言"

      not_jsonpath12:
        jsonpath: $cache{insert_course_01_action_duration}
        type: ==
        value: $.sql_data[*].duration
        AssertType: SQL
        message: "action_duration 断言"

      not_jsonpath13:
        jsonpath: $cache{insert_course_01_action_batch}
        type: ==
        value: $.sql_data[*].batch
        AssertType: SQL
        message: "action_batch 断言"

      not_jsonpath14:
        jsonpath: $cache{insert_course_01_action_span}
        type: ==
        value: $.sql_data[*].span
        AssertType: SQL
        message: "action_span 断言"

      not_jsonpath15:
        jsonpath: $cache{insert_course_01_action_leftForce}
        type: ==
        value: $.sql_data[*].left_force
        AssertType: SQL
        message: "action_leftForce 断言"

      not_jsonpath16:
        jsonpath: $cache{insert_course_01_action_rightForce}
        type: ==
        value: $.sql_data[*].right_force
        AssertType: SQL
        message: "action_right_force 断言"

      not_jsonpath17:
        jsonpath: $cache{insert_course_01_action_rightForceMode}
        type: ==
        value: $.sql_data[*].right_force_mode
        AssertType: SQL
        message: "action_rightForceMode 断言"

      not_jsonpath18:
        jsonpath: $cache{insert_course_01_action_leftForceMode}
        type: ==
        value: $.sql_data[*].left_force_mode
        AssertType: SQL
        message: "action_left_force_mode 断言"

      not_jsonpath19:
        jsonpath: $cache{insert_course_01_action_seq}
        type: ==
        value: $.sql_data[*].item_seq
        AssertType: SQL
        message: "action_seq 断言"

    sql:
      # 新增课程成功后，通过数据库查询 唯一值 name 通过状态判断是否新增成功
      - SELECT *, status as course_status from t_course where name="$cache{insert_course_01_name}"

      #
      - SELECT name c_groupName, seq c_groupReq, type_id type FROM t_course_group WHERE course_id =
        (SELECT id from t_course where name="$cache{insert_course_01_name}")

      - SELECT action_id,  duration, times, span, batch, left_force,
        right_force, left_force_mode, right_force_mode, seq as item_seq
        FROM t_course_group_item WHERE course_group_id in
        (SELECT  id FROM t_course_group WHERE course_id =
        (SELECT id from t_course where name="$cache{insert_course_01_name}"))

    teardown:
      # 再删除
      - case_id: delete_course_03
        # 删除时不需要响应结果，所以直接删除, 定义send_request
        send_request:
          # 被依赖的删除接口也不需要任何依赖参数，直接发送一次请求，定义为 send, false, false
          - dependent_type: send
            cache_data: false
            replace_key: false

    # 后置处理，用于清理新增的数据
    setup_sql: &setupSql
      - SELECT * FROM t_course WHERE `status`="1" and `name` not LIKE "%接口测试%"
        and name != "" and video_id is NOT NULL and model_id is NOT NULL
        and intro is NOT NULL and grade_id is NOT NULL and avatar_id is NOT NULL
        ORDER BY RAND() LIMIT 1

      - SELECT id as type_id, name as type_name from t_course_group_type ORDER BY RAND() LIMIT 1;

      - SELECT a.id as actionID FROM t_action a, t_action_video av WHERE a.id=av.action_id
        and av.id is not NULL and a.`status`="1" and a.`name` not LIKE "%接口测试%"
        ORDER BY RAND() LIMIT 1

    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.intro
        # 自定义的缓存名称
        name: insert_course_01_intro

      - type: request
        jsonpath: $.data.avatarId
        # 自定义的缓存名称
        name: insert_course_01_avatarId

      - type: request
        jsonpath: $.data.totalDuration
        # 自定义的缓存名称
        name: insert_course_01_totalDuration

      - type: request
        jsonpath: $.data.gradeId
        # 自定义的缓存名称
        name: insert_course_01_gradeId

      - type: request
        jsonpath: $.data.videoId
        # 自定义的缓存名称
        name: insert_course_01_videoId

      - type: request
        jsonpath: $.data.modelId
        # 自定义的缓存名称
        name: insert_course_01_modelId

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].type
        # 自定义的缓存名称
        name: insert_course_01_group_type

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].name
        # 自定义的缓存名称
        name: insert_course_01_group_name

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].seq
        # 自定义的缓存名称
        name: insert_course_01_group_seq

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].actionId
        # 自定义的缓存名称
        name: insert_course_01_actionId

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].times
        # 自定义的缓存名称
        name: insert_course_01_action_times

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].duration
        # 自定义的缓存名称
        name: insert_course_01_action_duration

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].batch
        # 自定义的缓存名称
        name: insert_course_01_action_batch

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].span
        # 自定义的缓存名称
        name: insert_course_01_action_span

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].leftForce
        # 自定义的缓存名称
        name: insert_course_01_action_leftForce

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].rightForce
        # 自定义的缓存名称
        name: insert_course_01_action_rightForce

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].rightForceMode
        # 自定义的缓存名称
        name: insert_course_01_action_rightForceMode

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].leftForceMode
        # 自定义的缓存名称
        name: insert_course_01_action_leftForceMode

      - type: request
        jsonpath: $.data.courseGroupAddRequests[0].courseGroupItemAddRequests[0].seq
        # 自定义的缓存名称
        name: insert_course_01_action_seq




insert_course_02:
    host: ${{host()}}
    url: /s/v1/fitness/course/insert
    method: POST
    detail: 删除课程用例依赖与先新增在删除---默认不执行
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data

    dependence_case: true
    # 依赖同一个接口多个数据
    dependence_case_data:
      *case_data
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:

    sql:
    setup_sql:
      *setupSql

insert_course_error_params:
    host: ${{host()}}
    url: /s/v1/fitness/course/insert
    method: POST
    detail: 不传seq 创建课程,期望创建失败
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "name": "${{get_name_time()}}",  # 动态参数, 确保sql查询时  name是唯一值
        "intro": "我是一个固定的简介",
        "useMachine": 0,
        "description": "通过吨吨吨来的简介",
        "avatarId": "MTA2208101228200000100A0E7002D",
        "calorie": 0,
        "totalDuration": 13,
        "gradeId": "03",
        "videoId": "",
        "modelId": "TMD220704120050000010025BC00BD",
        "courseGroupAddRequests": [{
              "name": "热身阶段",
              "type": "01",
              "seq": "",
              "courseGroupItemAddRequests": [
                {
                  "actionId": "ACT22053018001400018003DC40095",
                  "duration": "",
                  "times": 10,
                  "batch": 8,
                  "span": 25,
                  "leftForce": 12,
                  "rightForce": 12,
                  "rightForceMode": 2,
                  "leftForceMode": 2,
                  "seq": ""
                }
              ]
        }]
      }
    dependence_case: false
    # 依赖同一个接口多个数据
    dependence_case_data:
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
#        message: "errorCode 断言为 0"
      not_jsonpath:
        jsonpath: 0
        type: len_eq
        value: $.sql_data[*].count_n
        AssertType: SQL
#        message: "errorCode 断言为 0"
    sql:
      - SELECT count(*) count_n from t_course where name="$cache{insert_course_error_params_name}"


insert_course_error_name:
    host: ${{host()}}
    url: /s/v1/fitness/course/insert
    method: POST
    detail: 课程名称为空创建，期望失败
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "name": "",
        "intro": "我是一个固定的简介",
#        "useMachine": "",
        "description": "通过吨吨吨来的简介",
        "avatarId": "21314123131312",
        "calorie": ,
        "totalDuration": ,
        "gradeId": "",
        "videoId": "",
        "modelId": "21312421313213123",
        "courseGroupAddRequests": [{
              "name": "",
              "type": "",
              "seq": "10",
              "courseGroupItemAddRequests": [
                {
                  "actionId": "2221313",
                  "duration": "",
                  "times": "4",
                  "batch": "3",
                  "span": "2",
                  "leftForce": 5,
                  "rightForce": ,
                  "rightForceMode": ,
                  "leftForceMode": 2,
                  "seq": "10"
                }
              ]
        }]
      }
    dependence_case: false
    # 依赖同一个接口多个数据
    dependence_case_data:
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
#        message: "errorCode 断言为 0"
      not_jsonpath:
        jsonpath: 0
        type: len_eq
        value: $.sql_data[*].count_n
        AssertType: SQL
#        message: "errorCode 断言为 0"
    sql:
      - SELECT count(*) as count_n from t_course WHERE name="" and status=1;
