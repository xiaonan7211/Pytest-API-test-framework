# 公共参数
case_common:
  allureEpic: Gymery
  allureFeature: 动作训练服务
  allureStory: 动作训练过程接口
  mark: ActionTrain

action_train_process:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 正常的参数开始动作训练过程--训练5次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "id": "$cache{action_train_starting_02_trainId}",
        "seq": 15,
        "leftForceMode": "${{random_int(1, 3)}}",
        "rightForceMode": "${{random_int(1, 3)}}",
        "leftForce": "${{random_int(10, 20)}}",
        "rightForce":"${{random_int(10, 20)}}",
        "leftLength": "${{random_int(10, 20)}}",
        "rightLength": "${{random_int(10, 20)}}",
        "batch": "${{random_int(2, 5)}}",
        "span": "${{random_int(40, 60)}}"
      }
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: action_train_process1
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false

    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言为 0"

      message:
        jsonpath: $.message
        type: ==
        value: 写入动作训练过程数据成功
        AssertType:
        message: "message 断言"

      not_jsonpath:
        jsonpath: $cache{action_train_starting_02_trainId}
        type: ==
        value: $.sql_data[*].business_id
        AssertType: SQL
        message: "business_id 断言"

      not_jsonpath1:
        jsonpath: $cache{action_train_process_seq}
        type: ==
        value: $.sql_data[*].seq
        AssertType: SQL
        message: "seq 断言"

      not_jsonpath2:
        jsonpath: $cache{action_train_process_leftForceMode}
        type: ==
        value: $.sql_data[*].left_force_mode
        AssertType: SQL
        message: "left_force_mode 断言"

      not_jsonpath3:
        jsonpath: $cache{action_train_process_rightForceMode}
        type: ==
        value: $.sql_data[*].right_force_mode
        AssertType: SQL
        message: "right_force_mode 断言"

      not_jsonpath4:
        jsonpath: $cache{action_train_process_leftForce}
        type: ==
        value: $.sql_data[*].left_force
        AssertType: SQL
        message: "left_force 断言"

      not_jsonpath5:
        jsonpath: $cache{action_train_process_rightForce}
        type: ==
        value: $.sql_data[*].right_force
        AssertType: SQL
        message: "right_force 断言"

      not_jsonpath6:
        jsonpath: $cache{action_train_process_leftLength}
        type: ==
        value: $.sql_data[*].left_length
        AssertType: SQL
        message: "left_length 断言"

      not_jsonpath7:
        jsonpath: $cache{action_train_process_rightLength}
        type: ==
        value: $.sql_data[*].right_length
        AssertType: SQL
        message: "right_length 断言"

      not_jsonpath9:
        jsonpath: $cache{action_train_process_batch}
        type: ==
        value: $.sql_data[*].batch
        AssertType: SQL
        message: "batch 断言"

      not_jsonpath10:
        jsonpath: $cache{action_train_process_span}
        type: ==
        value: $.sql_data[*].train_span
        AssertType: SQL
        message: "train_span 断言"

      not_jsonpath11:
        jsonpath: $cache{gymera}
        type: ==
        value: $.sql_data[*].gymer_id
        AssertType: SQL
        message: "gymer_id 断言"

    sql: # 最后一次训练完，  按照时间倒序取到最后一次训练数据进行断言
      - select metric_value as batch, business_id from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="train.batch" order by create_time desc limit 1

      - select metric_value as seq, business_type from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="train.seq" order by create_time desc limit 1

      - select metric_value as left_force, gymer_id from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="left.force" order by create_time desc limit 1

      - select metric_value as right_force from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="right.force" order by create_time desc limit 1

      - select metric_value as left_length from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="left.length" order by create_time desc limit 1

      - select metric_value as right_length from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="right.length" order by create_time desc limit 1

      - select metric_value as left_force_mode from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="left.force.mode" order by create_time desc limit 1

      - select metric_value as right_force_mode from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="right.force.mode" order by create_time desc limit 1

      - select metric_value as train_span from t_gymer_fitness_data where business_id="$cache{action_train_starting_02_trainId}"
        and metric_id="train.span" order by create_time desc limit 1

    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.seq
        # 自定义的缓存名称
        name: action_train_process_seq

      - type: request
        jsonpath: $.data.leftForceMode
        # 自定义的缓存名称
        name: action_train_process_leftForceMode

      - type: request
        jsonpath: $.data.rightForceMode
        # 自定义的缓存名称
        name: action_train_process_rightForceMode

      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: action_train_process_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: action_train_process_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: action_train_process_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: action_train_process_rightLength

      - type: request
        jsonpath: $.data.batch
        # 自定义的缓存名称
        name: action_train_process_batch

      - type: request
        jsonpath: $.data.span
        # 自定义的缓存名称
        name: action_train_process_span

      - type: request
        jsonpath: $.data.id
        # 自定义的缓存名称
        name: action_train_process_trainId

action_train_process1:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 训练1次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data: &data
      {
        "id": "$cache{action_train_starting_02_trainId}",
        "seq": "${{random_int(1, 10)}}",
        "leftForceMode": "${{random_int(1, 3)}}",
        "rightForceMode": "${{random_int(1, 3)}}",
        "leftForce": "${{random_int(10, 20)}}",
        "rightForce": "${{random_int(10, 20)}}",
        "leftLength": "${{random_int(10, 20)}}",
        "rightLength": "${{random_int(10, 20)}}",
        "batch": "${{random_int(2, 5)}}",
        "span": "${{random_int(40, 60)}}"
      }

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: action_train_process2
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false

    assert: &assert
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言为 0"

      message:
        jsonpath: $.message
        type: ==
        value: 写入动作训练过程数据成功
        AssertType:
        message: "message 断言"
    sql:
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: action_train_process1_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: action_train_process1_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: action_train_process1_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: action_train_process1_rightLength



action_train_process2:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 训练2次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: action_train_process3
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false

    assert:
      *assert
    sql:
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: action_train_process2_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: action_train_process2_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: action_train_process2_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: action_train_process2_rightLength

      - type: request
        jsonpath: $.data.id
        # 自定义的缓存名称
        name: action_train_process2______trainID



action_train_process3:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 训练3次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: action_train_process4
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false

    assert:
      *assert
    sql:
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: action_train_process3_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: action_train_process3_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: action_train_process3_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: action_train_process3_rightLength



action_train_process4:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 训练4次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data

    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: action_train_starting_02
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false

    assert:
      *assert
    sql:
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: action_train_process4_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: action_train_process4_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: action_train_process4_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: action_train_process4_rightLength



action_train_process_error:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 错误的参数提交训练过程数据
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "id": "22222222222222222222",
        "seq": 3,
        "leftForceMode": 2,
        "rightForceMode": 3,
        "leftForce": 12,
        "rightForce":10,
        "leftLength": 11,
        "rightLength": 9,
        "batch": "${{random_int(2, 5)}}",
        "span": "${{random_int(40, 60)}}"
      }
    dependence_case: false
    # 依赖的数据
    dependence_case_data:

    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
        message: "errorCode 断言为 -1"
      message:
        jsonpath: $.message
        type: ==
        value: 此动作训练记录不存在
        AssertType:
        message: "message 断言"
    sql:
    setup_sql:


action_train_process_null:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 缺少字段提交
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:

    dependence_case: false
    # 依赖的数据
    dependence_case_data:

    assert:
      # 断言接口状态码
      status_code: 400

    sql:
    setup_sql:


action_train_process_not_login:
    host: ${{host()}}
    url: /s/v1/fitness/action-train/action-train-process
    method: POST
    detail: 不登录的情况下提交训练中数据
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data
    dependence_case: false
    # 依赖的数据
    dependence_case_data:
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
        message: "errorCode 断言为 -1"
      message:
        jsonpath: $.message
        type: ==
        value: 数据为空
        AssertType:
        message: "message 断言"
    sql:
    setup_sql: