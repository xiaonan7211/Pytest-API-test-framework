# 公共参数
case_common:
  allureEpic: Gymery
  allureFeature: 课程训练服务
  allureStory: 课程训练过程接口
  mark: CourseTrain

course_train_process_01:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 正常的参数提交课程训练过程
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "id": "$cache{course_train_starting_02_______trainDd}",
        "actionId": "",
        "seq": 15,
        "leftForceMode": "${{random_int(1, 3)}}",
        "rightForceMode": "${{random_int(1, 3)}}",
        "leftForce": "${{random_int(15, 30)}}",
        "rightForce": "${{random_int(15, 30)}}",
        "leftLength": "${{random_int(10, 20)}}",
        "rightLength": "${{random_int(10, 20)}}",
        "span": "${{random_int(40, 60)}}"
      }
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: course_train_process_02
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.action_id
            replace_key: $.data.actionId
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言为 0"

      message:
        jsonpath: $.message
        type: ==
        value: 写入课程训练过程数据成功
        AssertType:
        message: "message 断言"

#      not_jsonpath:
#        jsonpath: "course-train.process"
#        type: ==
#        value: $.sql_data[*].business_type
#        AssertType: SQL
#        message: "business_type 断言"
#
      not_jsonpath1:
        jsonpath: [15, 15, 15, 15, "$cache{course_train_process_01_seq}"]
        type: ==
        value: $.sql_data[*].seq
        AssertType: SQL
        message: "seq 断言"

      not_jsonpath2:
        jsonpath: [1, 1, 1, 1, "$cache{course_train_process_01_leftForceMode}"]
        type: ==
        value: $.sql_data[*].left_force_mode
        AssertType: SQL
        message: "left_force_mode 断言"

      not_jsonpath3:
        jsonpath: [1, 1, 1, 1, "$cache{course_train_process_01_rightForceMode}"]
        type: ==
        value: $.sql_data[*].right_force_mode
        AssertType: SQL
        message: "right_force_mode 断言"

      not_jsonpath4:
        jsonpath: [13, 13, 13, 13, "$cache{course_train_process_01_leftForce}"]
        type: ==
        value: $.sql_data[*].left_force
        AssertType: SQL
        message: "left_force 断言"

      not_jsonpath5:
        jsonpath: [13, 13, 13, 13, "$cache{course_train_process_01_rightForce}"]
        type: ==
        value: $.sql_data[*].right_force
        AssertType: SQL
        message: "right_force 断言"

      not_jsonpath6:
        jsonpath: [30, 30, 30, 30, "$cache{course_train_process_01_leftLength}"]
        type: ==
        value: $.sql_data[*].left_length
        AssertType: SQL
        message: "left_length 断言"

      not_jsonpath7:
        jsonpath: [35, 35, 35, 35, "$cache{course_train_process_01_rightLength}"]
        type: ==
        value: $.sql_data[*].right_length
        AssertType: SQL
        message: "right_length 断言"

      not_jsonpath9:
        jsonpath: [40, 40, 40, 40, "$cache{course_train_process_01_span}"]
        type: ==
        value: $.sql_data[*].train_span
        AssertType: SQL
        message: "train_span 断言"

      not_jsonpath10:
        jsonpath: $cache{gymera}
        type: ==
        value: $.sql_data[*].gymer_id
        AssertType: SQL
        message: "gymer_id 断言"

      not_jsonpath11:
        jsonpath: ["train.seq", "train.seq", "train.seq", "train.seq", "train.seq"]
        type: ==
        value: $.sql_data[*].metric_id_sql
        AssertType: SQL
        message: "metric_id_sql 断言"

      not_jsonpath12:
        jsonpath: ["left.force", "left.force", "left.force", "left.force", "left.force" ]
        type: ==
        value: $.sql_data[*].metric_id_leftForce
        AssertType: SQL
        message: "metric_id_leftForce 断言"

      not_jsonpath13:
        jsonpath: ["right.force", "right.force", "right.force", "right.force", "right.force"]
        type: ==
        value: $.sql_data[*].metric_id_rightForce
        AssertType: SQL
        message: "metric_id_rightForce 断言"

      not_jsonpath14:
        jsonpath: [ "left.length", "left.length", "left.length", "left.length", "left.length" ]
        type: ==
        value: $.sql_data[*].metric_id_leftLength
        AssertType: SQL
        message: "metric_id_leftLength 断言"

      not_jsonpath15:
        jsonpath: [ "right.length", "right.length", "right.length", "right.length", "right.length" ]
        type: ==
        value: $.sql_data[*].metric_id_rightLength
        AssertType: SQL
        message: "metric_id_rightLength 断言"

      not_jsonpath16:
        jsonpath: [ "left.force.mode", "left.force.mode", "left.force.mode", "left.force.mode", "left.force.mode" ]
        type: ==
        value: $.sql_data[*].metric_id_leftForceMode
        AssertType: SQL
        message: "metric_id_leftForceMode 断言"

      not_jsonpath17:
        jsonpath: [ "right.force.mode", "right.force.mode", "right.force.mode", "right.force.mode", "right.force.mode" ]
        type: ==
        value: $.sql_data[*].metric_id_rightForceMode
        AssertType: SQL
        message: "metric_id_rightForceMode 断言"

      not_jsonpath18:
        jsonpath: [ "train.span", "train.span", "train.span", "train.span", "train.span" ]
        type: ==
        value: $.sql_data[*].metric_id_trainSpan
        AssertType: SQL
        message: "metric_id_trainSpan 断言"

    sql: # 最后一次训练完，  按照时间倒序取到最后一次训练数据进行断言
      - select metric_value as seq, metric_id as metric_id_sql from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="train.seq";

      - select metric_value as left_force, metric_id as metric_id_leftForce from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="left.force";

      - select metric_value as right_force, metric_id as metric_id_rightForce from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="right.force";

      - select metric_value as left_length, metric_id as metric_id_leftLength from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="left.length";

      - select metric_value as right_length, metric_id as metric_id_rightLength from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="right.length";

      - select metric_value as left_force_mode, metric_id as metric_id_leftForceMode from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="left.force.mode";

      - select metric_value as right_force_mode, metric_id as metric_id_rightForceMode from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="right.force.mode";

      - select metric_value as train_span, metric_id as metric_id_trainSpan from 
        t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        and metric_id="train.span";

      - select gymer_id from t_gymer_fitness_data where business_id="$cache{course_train_starting_02_______trainDd}"
        order by rand() limit 1;

    setup_sql: &setup_sql
      - SELECT cgi.action_id from t_course as c, t_course_group as cg, t_course_group_item as cgi
          WHERE c.id=cg.course_id and cg.id=cgi.course_group_id
          and c.id="$cache{course_train_starting_02_courseID}" ORDER BY RAND() LIMIT 1
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.seq
        # 自定义的缓存名称
        name: course_train_process_01_seq

      - type: request
        jsonpath: $.data.leftForceMode
        # 自定义的缓存名称
        name: course_train_process_01_leftForceMode

      - type: request
        jsonpath: $.data.rightForceMode
        # 自定义的缓存名称
        name: course_train_process_01_rightForceMode

      - type: request
        jsonpath: $.data.leftForce
        # 自定义的缓存名称
        name: course_train_process_01_leftForce

      - type: request
        jsonpath: $.data.rightForce
        # 自定义的缓存名称
        name: course_train_process_01_rightForce

      - type: request
        jsonpath: $.data.leftLength
        # 自定义的缓存名称
        name: course_train_process_01_leftLength

      - type: request
        jsonpath: $.data.rightLength
        # 自定义的缓存名称
        name: course_train_process_01_rightLength

      - type: request
        jsonpath: $.data.span
        # 自定义的缓存名称
        name: course_train_process_01_span


course_train_process_02:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 训练两次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data: &data
      {
        "id": "$cache{course_train_starting_02_______trainDd}",
        "actionId": "",
        "seq": 15,
        "leftForceMode": "1",
        "rightForceMode": "1",
        "leftForce": "13",
        "rightForce": "13",
        "leftLength": "30",
        "rightLength": "35",
        "span": "40"
      }
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: course_train_process_03
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.action_id
            replace_key: $.data.actionId

    assert: &assert
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言为 0"

    sql:
    setup_sql:
      *setup_sql


course_train_process_03:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 训练3次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: course_train_process_04
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.action_id
            replace_key: $.data.actionId
    assert:
      *assert
    sql:
    setup_sql:
      *setup_sql

course_train_process_04:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 训练4次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: course_train_process_05
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.action_id
            replace_key: $.data.actionId
    assert:
      *assert
    sql:
    setup_sql:
      *setup_sql


course_train_process_05:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 训练5次
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run: false
    data:
      <<: *data
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: course_train_starting_02
        dependent_data:
          - dependent_type: request
            jsonpath: false
            replace_key: false
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.action_id
            replace_key: $.data.actionId

    assert:
      *assert
    sql:
    setup_sql:
      *setup_sql


course_train_process_null:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 错误的参数提交训练过程，没有id
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "id": "",
        "actionId": "",
        "seq": 2,
        "leftForceMode": 2,
        "rightForceMode": 3,
        "leftForce": 10,
        "rightForce": 12,
        "leftLength": 8,
        "rightLength": 8
      }
    dependence_case: false
    # 依赖的数据
    dependence_case_data:

    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
        message: "errorCode 断言"

      message:
        jsonpath: $.message
        type: ==
        value: 此课程训练记录不存在
        AssertType:
        message: "message 断言"

      not_jsonpath:
        jsonpath: 0
        type: ==
        value: $.sql_data[*].count_n
        AssertType: SQL
        message: "count_n 断言"

    sql:
      - SELECT count(*) as count_n FROM t_gymer_fitness_data WHERE business_id=""


course_train_process_error:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 错误的参数提交训练过程
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      {
        "id": "23243534543534",
        "actionId": "24325346456545",
        "seq": 2,
        "leftForceMode": 2,
        "rightForceMode": 3,
        "leftForce": 10,
        "rightForce": 12,
        "leftLength": 8,
        "rightLength": 8
      }
    dependence_case: false
    # 依赖的数据
    dependence_case_data:

    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: -1
        AssertType:
        message: "errorCode 断言"

      message:
        jsonpath: $.message
        type: ==
        value: 此课程训练记录不存在
        AssertType:
        message: "message 断言"

      not_jsonpath:
        jsonpath: 0
        type: ==
        value: $.sql_data[*].count_n
        AssertType: SQL
        message: "count_n 断言"

    sql:
      - SELECT count(*) as count_n FROM t_gymer_fitness_data WHERE business_id="23243534543534"


course_train_process_field_null:
    host: ${{host()}}
    url: /s/v1/fitness/course-train/course-train-process
    method: POST
    detail: 字段缺少
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: json
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
    dependence_case: false
    # 依赖的数据
    dependence_case_data:

    assert:
      # 断言接口状态码
      status_code: 400
    sql:
