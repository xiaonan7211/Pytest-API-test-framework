# 公共参数
case_common:
  allureEpic: Gymery
  allureFeature: 健身栏目服务
  allureStory: 根据一级健身栏目获取子级
  mark: Catalog

get_catalog_children:
    host: ${{host()}}
    url: /s/v1/fitness/fitness-catalog/fitness-catalog-children
    method: GET
    detail: 正确的一级栏目获取子级
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: params
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      id:
    dependence_case: true
    # 依赖的数据
    dependence_case_data:
      - case_id: self
        dependent_data:
          - dependent_type: sqlData
            jsonpath: $.pid
            replace_key: $.data.id
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
        message: "errorCode 断言"

      message:
        jsonpath: $.message
        type: ==
        value: 获取子级栏目列表成功
        AssertType:
        message: "message 断言"

      ids:
        jsonpath: $.value[*].id
        type: ==
        value: $.sql_data[*].id
        AssertType: SQL
        message: "ids 断言"

      name:
        jsonpath: $.value[*].name
        type: ==
        value: $.sql_data[*].name
        AssertType: SQL
        message: "name 断言"

      avatar_id:
        jsonpath: $.value[*].avatarId
        type: ==
        value: $.sql_data[*].avatar_id
        AssertType: SQL
        message: "avatar_id 断言"

      description:
        jsonpath: $.value[*].description
        type: ==
        value: $.sql_data[*].description
        AssertType: SQL
        message: "description 断言"

      pid:
        jsonpath: $.value[*].pid
        type: ==
        value: $.sql_data[*].pid
        AssertType: SQL
        message: "pid 断言"

      p_name:
        jsonpath: $.value[*].bodyPartList[*]
        type: ==
        value: $.sql_data[*].p_name
        AssertType: SQL
        message: "p_name 断言"


    sql:
      - SELECT * FROM t_fitness_catalog WHERE pid="$cache{get_catalog_children_id}" and `status`="1"

      - SELECT bp.name as p_name FROM t_fitness_catalog as fc LEFT JOIN t_fitness_catalog_body_part as cbp
        ON fc.id=cbp.fitness_catalog_id LEFT JOIN t_body_part as bp ON cbp.body_part_id=bp.id
        WHERE fc.pid="$cache{get_catalog_children_id}" and `status`="1" and bp.id is not NULL

    setup_sql:
      - SELECT pid FROM t_fitness_catalog as c, (SELECT id FROM t_fitness_catalog WHERE pid="0" and `status`="1") as c1
        WHERE c.pid = c1.id ORDER BY RAND() LIMIT 1
    current_request_set_cache:
      # 1、response 从响应中提取内容  2、request从请求中提取内容
      - type: request
        jsonpath: $.data.id
        # 自定义的缓存名称
        name: get_catalog_children_id


get_catalog_children_null:
    host: ${{host()}}
    url: /s/v1/fitness/fitness-catalog/fitness-catalog-children
    method: GET
    detail: 错误的一级健身栏目获取子级
    headers:
      Content-Type: application/json
#      Cache-Control: no-cache
#      Content-Length:
      # 这里token的值，写的是存入缓存的名称
#      Authorization: $cache{login_cookie}
    # 请求的数据，是 params 还是 json、或者file、data
    requestType: params
    # 是否执行，空或者 true 都会执行
    is_run:
    data:
      id: "22432432"
    dependence_case: false
    # 依赖的数据
    dependence_case_data:
    assert:
      # 断言接口状态码
      errorCode:
        jsonpath: $.code
        type: ==
        value: 0
        AssertType:
      count_nums:
        jsonpath: $.value
        type: ==
        value: []
        AssertType:
    sql:

