{"uid":"1be6546d611c7fb6","name":"test_plantemplate_add[正常的参数新增计划模板]","fullName":"test_case.PlanTemplate.test_plantemplate_add.TestPlantemplateAdd#test_plantemplate_add","historyId":"109fe37e062e147f86565b28edef6c25","time":{"start":1669002867047,"stop":1669002867084,"duration":37},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.code","statusTrace":"self = <test_plantemplate_add.TestPlantemplateAdd object at 0x000002385583CAC0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.code', 'message': 'errorCode 断言为 0', 'type': '==', ....70000100CF0E004F', 'bgm': '', 'catalogId': '/01/01', 'createBy': '$cache{gymera}', ...}}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"新增计划模板接口\")\n    @pytest.mark.PlanTemplate\n    @pytest.mark.parametrize('in_data', eval(str_redata), ids=[i['detail'] for i in re_data])\n    def test_plantemplate_add(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\PlanTemplate\\test_plantemplate_add.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x0000023855A4DB20>\nresponse_data = '{\"timestamp\":1669002872211,\"status\":400,\"error\":\"Bad Request\",\"path\":\"/s/v1/fitness/plantemplate/add\"}'\nsql_data = {'sql': None}, status_code = 400\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                # 如果key不是400,且也不是200，则直接报错\n                elif status_code not in [400, 200]:\n                    ERROR.logger.error(\"请求失败，返回内容： %s\", response_data)\n                    assert status_code == 200\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 如果assert中的key为 not_jsonpath, 实际结果直接获取，不需要匹配\n                    if \"not_jsonpath\" in key:\n                        resp_data = values.get(\"jsonpath\")\n                    else:\n                        # 从yaml获取jsonpath，拿到对象的接口响应数据\n                        resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.code\n\nutils\\assertion\\assert_control.py:183: JsonpathExtractionFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1669002832865,"stop":1669002832944,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"work_login_init","time":{"start":1669002832944,"stop":1669002833147,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"case_skip","time":{"start":1669002867047,"stop":1669002867047,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.code","statusTrace":"self = <test_plantemplate_add.TestPlantemplateAdd object at 0x000002385583CAC0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.code', 'message': 'errorCode 断言为 0', 'type': '==', ....70000100CF0E004F', 'bgm': '', 'catalogId': '/01/01', 'createBy': '$cache{gymera}', ...}}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"新增计划模板接口\")\n    @pytest.mark.PlanTemplate\n    @pytest.mark.parametrize('in_data', eval(str_redata), ids=[i['detail'] for i in re_data])\n    def test_plantemplate_add(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\PlanTemplate\\test_plantemplate_add.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x0000023855A4DB20>\nresponse_data = '{\"timestamp\":1669002872211,\"status\":400,\"error\":\"Bad Request\",\"path\":\"/s/v1/fitness/plantemplate/add\"}'\nsql_data = {'sql': None}, status_code = 400\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                # 如果key不是400,且也不是200，则直接报错\n                elif status_code not in [400, 200]:\n                    ERROR.logger.error(\"请求失败，返回内容： %s\", response_data)\n                    assert status_code == 200\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 如果assert中的key为 not_jsonpath, 实际结果直接获取，不需要匹配\n                    if \"not_jsonpath\" in key:\n                        resp_data = values.get(\"jsonpath\")\n                    else:\n                        # 从yaml获取jsonpath，拿到对象的接口响应数据\n                        resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.code\n\nutils\\assertion\\assert_control.py:183: JsonpathExtractionFailed","steps":[{"name":"请求URL: http://192.168.5.140:9000/s/v1/fitness/plantemplate/add","time":{"start":1669002867082,"stop":1669002867082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求方式: POST","time":{"start":1669002867082,"stop":1669002867082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求头: ","time":{"start":1669002867082,"stop":1669002867083,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"84655c604ca8d406","name":"请求头: ","source":"84655c604ca8d406.json","type":"application/json","size":886}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"请求数据: ","time":{"start":1669002867083,"stop":1669002867083,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"15db2fb9a637d450","name":"请求数据: ","source":"15db2fb9a637d450.json","type":"application/json","size":659}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"预期数据: ","time":{"start":1669002867084,"stop":1669002867084,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"9a5812bdadb19469","name":"预期数据: ","source":"9a5812bdadb19469.json","type":"application/json","size":121}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"响应耗时(ms): 25","time":{"start":1669002867084,"stop":1669002867084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"响应结果: ","time":{"start":1669002867084,"stop":1669002867084,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"cd6a0711a130c171","name":"响应结果: ","source":"cd6a0711a130c171.json","type":"application/json","size":116}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"45517a62641f89c5","name":"log","source":"45517a62641f89c5.txt","type":"text/plain","size":2173}],"parameters":[],"hasContent":true,"stepsCount":7,"shouldDisplayMessage":true,"attachmentsCount":5},"afterStages":[],"labels":[{"name":"feature","value":"计划模板服务"},{"name":"story","value":"新增计划模板接口"},{"name":"epic","value":"Gymery"},{"name":"tag","value":"PlanTemplate"},{"name":"parentSuite","value":"test_case.PlanTemplate"},{"name":"suite","value":"test_plantemplate_add"},{"name":"subSuite","value":"TestPlantemplateAdd"},{"name":"host","value":"GnYuHao"},{"name":"thread","value":"89080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.PlanTemplate.test_plantemplate_add"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'http://192.168.5.140:9000/s/v1/fitness/plantemplate/add', 'method': 'POST', 'detail': '正常的参数新增计划模板', 'assert_data': {'errorCode': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None, 'message': 'errorCode 断言为 0'}}, 'headers': {'Content-Type': 'application/json', 'Authorization': '$cache{login_cookie}'}, 'requestType': 'JSON', 'is_run': None, 'data': {'plan': {'name': '接口测试创建数据1669002831.2967632', 'catalogId': '健身需求id', 'gradeId': '等级', 'createBy': '$cache{gymera}', 'updateBy': '', 'avatarId': '', 'useMachine': 1, 'bgm': '', 'lessons': 3, 'groups': 3, 'title': '测试数据', 'description': '测试数据001', 'status': 1, 'createTime': '2022-11-21 11:53:51.322390', 'updateTime': ''}, 'groups': [{'group': {'lessons': 3, 'totalDuration': 3000, 'seq': 2}, 'actions': [{'action': {'actionId': '动作id', 'type': '02', 'power': 6000, 'times': 5}, 'delta': {'timesDelta': 5, 'powerDelta': 1000, 'span': 10, 'seq': 2}}]}]}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.c_id', 'set_cache': None, 'replace_key': '$.data.plan.catalogId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.g_id', 'set_cache': None, 'replace_key': '$.data.plan.gradeId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.avatar_id', 'set_cache': None, 'replace_key': '$.data.plan.avatarId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.a_id', 'set_cache': None, 'replace_key': '$.data.groups[0].actions[0].action.actionId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.t_id', 'set_cache': None, 'replace_key': '$.data.groups[0].actions[0].action.type'}]}], 'sql': None, 'setup_sql': ['SELECT id as c_id from t_fitness_catalog WHERE pid != \"0\" and `status`=1  LIMIT 1;', 'SELECT id as g_id FROM t_grade  LIMIT 1;', 'SELECT avatar_id FROM t_action WHERE `status`=1 LIMIT 1;', 'SELECT id as a_id from t_action WHERE `status`=1  LIMIT 1;', 'SELECT id as t_id from t_course_group_type  LIMIT 1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["PlanTemplate"]},"source":"1be6546d611c7fb6.json","parameterValues":["{'url': 'http://192.168.5.140:9000/s/v1/fitness/plantemplate/add', 'method': 'POST', 'detail': '正常的参数新增计划模板', 'assert_data': {'errorCode': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None, 'message': 'errorCode 断言为 0'}}, 'headers': {'Content-Type': 'application/json', 'Authorization': '$cache{login_cookie}'}, 'requestType': 'JSON', 'is_run': None, 'data': {'plan': {'name': '接口测试创建数据1669002831.2967632', 'catalogId': '健身需求id', 'gradeId': '等级', 'createBy': '$cache{gymera}', 'updateBy': '', 'avatarId': '', 'useMachine': 1, 'bgm': '', 'lessons': 3, 'groups': 3, 'title': '测试数据', 'description': '测试数据001', 'status': 1, 'createTime': '2022-11-21 11:53:51.322390', 'updateTime': ''}, 'groups': [{'group': {'lessons': 3, 'totalDuration': 3000, 'seq': 2}, 'actions': [{'action': {'actionId': '动作id', 'type': '02', 'power': 6000, 'times': 5}, 'delta': {'timesDelta': 5, 'powerDelta': 1000, 'span': 10, 'seq': 2}}]}]}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.c_id', 'set_cache': None, 'replace_key': '$.data.plan.catalogId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.g_id', 'set_cache': None, 'replace_key': '$.data.plan.gradeId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.avatar_id', 'set_cache': None, 'replace_key': '$.data.plan.avatarId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.a_id', 'set_cache': None, 'replace_key': '$.data.groups[0].actions[0].action.actionId'}, {'dependent_type': 'sqlData', 'jsonpath': '$.t_id', 'set_cache': None, 'replace_key': '$.data.groups[0].actions[0].action.type'}]}], 'sql': None, 'setup_sql': ['SELECT id as c_id from t_fitness_catalog WHERE pid != \"0\" and `status`=1  LIMIT 1;', 'SELECT id as g_id FROM t_grade  LIMIT 1;', 'SELECT avatar_id FROM t_action WHERE `status`=1 LIMIT 1;', 'SELECT id as a_id from t_action WHERE `status`=1  LIMIT 1;', 'SELECT id as t_id from t_course_group_type  LIMIT 1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}