{"uid":"2bd410a229423f49","name":"test_body_part_action_type[正常的动作类型id获取部位]","fullName":"test_case.BodyPart.test_body_part_action_type.TestBodyPartActionType#test_body_part_action_type","historyId":"e49c4f220051bc995aa7854ae5e96d27","time":{"start":1669002850195,"stop":1669002850229,"duration":34},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.value[*].id","statusTrace":"self = <test_body_part_action_type.TestBodyPartActionType object at 0x00000238553486D0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.code', 'message': 'errorCode 断言为 0', 'type': '==', ....'name': 'get_body_part_actionType_id', 'type': 'request'}], 'data': {'actionType': None}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"根据动作类型获取部位接口\")\n    @pytest.mark.BodyPart\n    @pytest.mark.parametrize('in_data', eval(str_redata), ids=[i['detail'] for i in re_data])\n    def test_body_part_action_type(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\BodyPart\\test_body_part_action_type.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x00000238558B6070>\nresponse_data = '{\"code\":0,\"message\":\"get-body-parts-action-type.succeed\",\"value\":[]}'\nsql_data = {'sql_data': []}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                # 如果key不是400,且也不是200，则直接报错\n                elif status_code not in [400, 200]:\n                    ERROR.logger.error(\"请求失败，返回内容： %s\", response_data)\n                    assert status_code == 200\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 如果assert中的key为 not_jsonpath, 实际结果直接获取，不需要匹配\n                    if \"not_jsonpath\" in key:\n                        resp_data = values.get(\"jsonpath\")\n                    else:\n                        # 从yaml获取jsonpath，拿到对象的接口响应数据\n                        resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.value[*].id\n\nutils\\assertion\\assert_control.py:183: JsonpathExtractionFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1669002832865,"stop":1669002832944,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"work_login_init","time":{"start":1669002832944,"stop":1669002833147,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"case_skip","time":{"start":1669002850194,"stop":1669002850195,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.value[*].id","statusTrace":"self = <test_body_part_action_type.TestBodyPartActionType object at 0x00000238553486D0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.code', 'message': 'errorCode 断言为 0', 'type': '==', ....'name': 'get_body_part_actionType_id', 'type': 'request'}], 'data': {'actionType': None}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"根据动作类型获取部位接口\")\n    @pytest.mark.BodyPart\n    @pytest.mark.parametrize('in_data', eval(str_redata), ids=[i['detail'] for i in re_data])\n    def test_body_part_action_type(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\BodyPart\\test_body_part_action_type.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x00000238558B6070>\nresponse_data = '{\"code\":0,\"message\":\"get-body-parts-action-type.succeed\",\"value\":[]}'\nsql_data = {'sql_data': []}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                # 如果key不是400,且也不是200，则直接报错\n                elif status_code not in [400, 200]:\n                    ERROR.logger.error(\"请求失败，返回内容： %s\", response_data)\n                    assert status_code == 200\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 如果assert中的key为 not_jsonpath, 实际结果直接获取，不需要匹配\n                    if \"not_jsonpath\" in key:\n                        resp_data = values.get(\"jsonpath\")\n                    else:\n                        # 从yaml获取jsonpath，拿到对象的接口响应数据\n                        resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.value[*].id\n\nutils\\assertion\\assert_control.py:183: JsonpathExtractionFailed","steps":[{"name":"请求URL: http://192.168.5.140:9000/s/v1/fitness/body-part/action-type?actionType=01","time":{"start":1669002850227,"stop":1669002850227,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求方式: GET","time":{"start":1669002850227,"stop":1669002850227,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求头: ","time":{"start":1669002850227,"stop":1669002850227,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"e6bd8b1101605992","name":"请求头: ","source":"e6bd8b1101605992.json","type":"application/json","size":163}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"请求数据: ","time":{"start":1669002850227,"stop":1669002850227,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"8384b78a16b76d4c","name":"请求数据: ","source":"8384b78a16b76d4c.json","type":"application/json","size":22}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"预期数据: ","time":{"start":1669002850227,"stop":1669002850228,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f07ce1a179fb3212","name":"预期数据: ","source":"f07ce1a179fb3212.json","type":"application/json","size":508}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"响应耗时(ms): 20","time":{"start":1669002850228,"stop":1669002850228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"响应结果: ","time":{"start":1669002850228,"stop":1669002850228,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"e55457bd860b057a","name":"响应结果: ","source":"e55457bd860b057a.json","type":"application/json","size":78}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"d4d525f99cbd3897","name":"log","source":"d4d525f99cbd3897.txt","type":"text/plain","size":789}],"parameters":[],"hasContent":true,"stepsCount":7,"shouldDisplayMessage":true,"attachmentsCount":5},"afterStages":[],"labels":[{"name":"feature","value":"部位服务"},{"name":"story","value":"根据动作类型获取部位接口"},{"name":"epic","value":"Gymery"},{"name":"tag","value":"BodyPart"},{"name":"parentSuite","value":"test_case.BodyPart"},{"name":"suite","value":"test_body_part_action_type"},{"name":"subSuite","value":"TestBodyPartActionType"},{"name":"host","value":"GnYuHao"},{"name":"thread","value":"89080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.BodyPart.test_body_part_action_type"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'http://192.168.5.140:9000/s/v1/fitness/body-part/action-type', 'method': 'GET', 'detail': '正常的动作类型id获取部位', 'assert_data': {'errorCode': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None, 'message': 'errorCode 断言为 0'}, 'ids': {'jsonpath': '$.value[*].id', 'type': '==', 'value': '$.sql_data[*].id', 'AssertType': 'SQL', 'message': '      ids 断言'}, 'names': {'jsonpath': '$.value[*].name', 'type': '==', 'value': '$.sql_data[*].name', 'AssertType': 'SQL', 'message': '  name 断言'}, 'message': {'jsonpath': '$.message', 'type': '==', 'value': None, 'AssertType': None, 'message': '  message 断言'}}, 'headers': {'Content-Type': 'application/json'}, 'requestType': 'PARAMS', 'is_run': None, 'data': {'actionType': None}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.id', 'set_cache': None, 'replace_key': '$.data.actionType'}]}], 'sql': ['SELECT * FROM t_body_part WHERE id in ( (SELECT bp.pid FROM t_action_type as t, t_action_body_part as abp, t_body_part as bp, t_action as a WHERE t.id=a.action_type and a.id =abp.action_id and abp.body_part_id=bp.id and t.id=\"$cache{get_body_part_actionType_id}\") )'], 'setup_sql': ['SELECT * FROM t_action_type HAVING rand() LIMIT 1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': [{'type': 'request', 'jsonpath': '$.data.actionType', 'name': 'get_body_part_actionType_id'}], 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["BodyPart"]},"source":"2bd410a229423f49.json","parameterValues":["{'url': 'http://192.168.5.140:9000/s/v1/fitness/body-part/action-type', 'method': 'GET', 'detail': '正常的动作类型id获取部位', 'assert_data': {'errorCode': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None, 'message': 'errorCode 断言为 0'}, 'ids': {'jsonpath': '$.value[*].id', 'type': '==', 'value': '$.sql_data[*].id', 'AssertType': 'SQL', 'message': '      ids 断言'}, 'names': {'jsonpath': '$.value[*].name', 'type': '==', 'value': '$.sql_data[*].name', 'AssertType': 'SQL', 'message': '  name 断言'}, 'message': {'jsonpath': '$.message', 'type': '==', 'value': None, 'AssertType': None, 'message': '  message 断言'}}, 'headers': {'Content-Type': 'application/json'}, 'requestType': 'PARAMS', 'is_run': None, 'data': {'actionType': None}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.id', 'set_cache': None, 'replace_key': '$.data.actionType'}]}], 'sql': ['SELECT * FROM t_body_part WHERE id in ( (SELECT bp.pid FROM t_action_type as t, t_action_body_part as abp, t_body_part as bp, t_action as a WHERE t.id=a.action_type and a.id =abp.action_id and abp.body_part_id=bp.id and t.id=\"$cache{get_body_part_actionType_id}\") )'], 'setup_sql': ['SELECT * FROM t_action_type HAVING rand() LIMIT 1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': [{'type': 'request', 'jsonpath': '$.data.actionType', 'name': 'get_body_part_actionType_id'}], 'sleep': None}"]}